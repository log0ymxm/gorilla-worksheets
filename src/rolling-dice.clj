;; gorilla-repl.fileformat = 1

;; **
;;; # Rolling Dice, and Flipping Coins
;; **

;; @@
(require '[clojure.math.combinatorics :refer [selections]])
(require '[clojure.pprint :refer [pprint]])
(require '[incanter.core :refer [choose]])
(require '[incanter.distributions :refer [binomial-distribution pdf]])
(use 'gorilla-plot.core)

;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; If @@X@@ is the product of two dice, what are it's probabilities. @@P(X=i)@@, for @@i=1,2,3,\dots@@
;; **

;; @@
(def probabilities (->> (map inc (range 6))             ; One die
                        (#(selections % 2))             ; All possible rolls from 2 dice
                        (map #(apply * %))              ; Compute products
                        frequencies                     ; Do some counting
                        (#(map (fn [[product freq]]     ; Make our frequencies into a ratio
                                (vector product (/ freq (* 2 (count %)))))
                               %))
						sort))
(pprint probabilities)

;; Ensure our distribution sums to 1
(apply + (map second probabilities))
;; @@
;; ->
;;; ([1 1/36]
;;;  [2 1/18]
;;;  [3 1/18]
;;;  [4 1/12]
;;;  [5 1/18]
;;;  [6 1/9]
;;;  [8 1/18]
;;;  [9 1/36]
;;;  [10 1/18]
;;;  [12 1/9]
;;;  [15 1/18]
;;;  [16 1/36]
;;;  [18 1/18]
;;;  [20 1/18]
;;;  [24 1/18]
;;;  [25 1/36]
;;;  [30 1/18]
;;;  [36 1/36])
;;;
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-bigint'>1N</span>","value":"1N"}
;; <=

;; **
;;; What if @@X@@ is the sum of 3 dice?
;; **

;; @@
(def probabilities (->> (map inc (range 6))
                        (#(selections % 3))
                        (map #(apply + %))
                        frequencies
                        (#(map (fn [[product freq]]
                                (vector product (/ freq 216))) ; 6^3 (the int avoids a decimal calc)
                               %))
                        sort))
(pprint probabilities)

;; Ensure our distribution sums to 1
(apply + (map second probabilities))
;; @@
;; ->
;;; ([3 1/216]
;;;  [4 1/72]
;;;  [5 1/36]
;;;  [6 5/108]
;;;  [7 5/72]
;;;  [8 7/72]
;;;  [9 25/216]
;;;  [10 1/8]
;;;  [11 1/8]
;;;  [12 25/216]
;;;  [13 7/72]
;;;  [14 5/72]
;;;  [15 5/108]
;;;  [16 1/36]
;;;  [17 1/72]
;;;  [18 1/216])
;;;
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-bigint'>1N</span>","value":"1N"}
;; <=

;; @@
(defn dice [n event-fn]
  {:post [(= 1 (apply + (map second %)))]}
  (->> (map inc (range 6))
       (#(selections % n))
       (map event-fn)
       frequencies
       (#(map (fn [[product freq]]
                (vector product (/ freq (Math/pow 6 n))))
              %))
       sort))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;user/dice</span>","value":"#'user/dice"}
;; <=

;; @@
(pprint (dice 3 #(apply + %)))
;; @@
;; ->
;;; ([3 0.004629629629629629]
;;;  [4 0.013888888888888888]
;;;  [5 0.027777777777777776]
;;;  [6 0.046296296296296294]
;;;  [7 0.06944444444444445]
;;;  [8 0.09722222222222222]
;;;  [9 0.11574074074074074]
;;;  [10 0.125]
;;;  [11 0.125]
;;;  [12 0.11574074074074074]
;;;  [13 0.09722222222222222]
;;;  [14 0.06944444444444445]
;;;  [15 0.046296296296296294]
;;;  [16 0.027777777777777776]
;;;  [17 0.013888888888888888]
;;;  [18 0.004629629629629629])
;;;
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(pprint (dice 10 #(apply + (filter odd? %))))
;; @@
;; ->
;;; ([0 9.765625E-4]
;;;  [1 0.0032552083333333335]
;;;  [2 0.0048828125]
;;;  [3 0.007595486111111111]
;;;  [4 0.012297453703703705]
;;;  [5 0.017288773148148147]
;;;  [6 0.025057066615226338]
;;;  [7 0.031158907750342937]
;;;  [8 0.03677849579903978]
;;;  [9 0.04594849854569934]
;;;  [10 0.05135327228234179]
;;;  [11 0.05792841935299497]
;;;  [12 0.06241175231587326]
;;;  [13 0.06274201960448103]
;;;  [14 0.06657862736350319]
;;;  [15 0.0646939538561195]
;;;  [16 0.062549019140883]
;;;  [17 0.06003157864654778]
;;;  [18 0.05317857375336585]
;;;  [19 0.04994891689529035]
;;;  [20 0.04325264425519484]
;;;  [21 0.037020366559975613]
;;;  [22 0.03217054771249302]
;;;  [23 0.02533614826245999]
;;;  [24 0.021558747158080576]
;;;  [25 0.016708283321902148]
;;;  [26 0.01282460792625616]
;;;  [27 0.01018437150713814]
;;;  [28 0.007077179810411692]
;;;  [29 0.005568237025605853]
;;;  [30 0.003805152156471744]
;;;  [31 0.002643461362597165]
;;;  [32 0.001919750969533777]
;;;  [33 0.00114609529797287]
;;;  [34 8.620521992328405E-4]
;;;  [35 4.9118369913123E-4]
;;;  [36 3.195174770106183E-4]
;;;  [37 2.0540409236396892E-4]
;;;  [38 1.0071746557943403E-4]
;;;  [39 7.739864349946654E-5]
;;;  [40 3.0711384824467815E-5]
;;;  [41 2.232653177869227E-5]
;;;  [42 1.0170975588070924E-5]
;;;  [43 4.465306355738455E-6]
;;;  [44 3.4730160544632424E-6]
;;;  [45 4.96145150637606E-7]
;;;  [46 9.095994428356111E-7]
;;;  [48 1.65381716879202E-7]
;;;  [50 1.65381716879202E-8])
;;;
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(defn difference [coin-tosses]
  (->> coin-tosses
       (map #(if (clojure.core/= :H %) 1 -1))
       (apply +)
       ;(#(Math/abs %))
       ))

(def n 3)

(->> (selections [:H :T] n)
     (map difference)
     frequencies
     (#(map (fn [[product freq]]
              (vector product (/ freq (Math/pow 2 n))))
            %))
     sort)

;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-list'>(<span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"list-like","open":"<span class='clj-vector'>[<span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>-3</span>","value":"-3"},{"type":"html","content":"<span class='clj-double'>0.125</span>","value":"0.125"}],"value":"[-3 0.125]"},{"type":"list-like","open":"<span class='clj-vector'>[<span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>-1</span>","value":"-1"},{"type":"html","content":"<span class='clj-double'>0.375</span>","value":"0.375"}],"value":"[-1 0.375]"},{"type":"list-like","open":"<span class='clj-vector'>[<span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-double'>0.375</span>","value":"0.375"}],"value":"[1 0.375]"},{"type":"list-like","open":"<span class='clj-vector'>[<span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"},{"type":"html","content":"<span class='clj-double'>0.125</span>","value":"0.125"}],"value":"[3 0.125]"}],"value":"([-3 0.125] [-1 0.375] [1 0.375] [3 0.125])"}
;; <=

;; @@
(println (dice 2 #(apply max %)))

(def probabilities (->> (map inc (range 6))
                        (#(selections % 2))
                        (map #(apply max %))
                        frequencies
                        (#(map (fn [[product freq]]
                                (vector product (/ freq 36))) ; 6^3 (the int avoids a decimal calc)
                               %))
                        sort))
(pprint probabilities)

;; Ensure our distribution sums to 1
(apply + (map second probabilities))
;; @@
;; ->
;;; ([1 0.027777777777777776] [2 0.08333333333333333] [3 0.1388888888888889] [4 0.19444444444444445] [5 0.25] [6 0.3055555555555556])
;;; ([1 1/36] [2 1/12] [3 5/36] [4 7/36] [5 1/4] [6 11/36])
;;;
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-bigint'>1N</span>","value":"1N"}
;; <=

;; @@
(list-plot (dice 3 #(apply + %)))
;; @@
;; =>
;;; {"type":"vega","content":{"axes":[{"scale":"x","type":"x"},{"scale":"y","type":"y"}],"scales":[{"name":"x","type":"linear","range":"width","domain":{"data":"b6b3f5ee-ad23-494e-9cc7-b302c36cba03","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"domain":{"data":"b6b3f5ee-ad23-494e-9cc7-b302c36cba03","field":"data.y"}}],"marks":[{"type":"symbol","from":{"data":"b6b3f5ee-ad23-494e-9cc7-b302c36cba03"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"fill":{"value":"steelblue"},"fillOpacity":{"value":1}},"update":{"shape":"circle","size":{"value":70},"stroke":{"value":"transparent"}},"hover":{"size":{"value":210},"stroke":{"value":"white"}}}}],"data":[{"name":"b6b3f5ee-ad23-494e-9cc7-b302c36cba03","values":[{"x":3,"y":0.004629629629629629},{"x":4,"y":0.013888888888888888},{"x":5,"y":0.027777777777777776},{"x":6,"y":0.046296296296296294},{"x":7,"y":0.06944444444444445},{"x":8,"y":0.09722222222222222},{"x":9,"y":0.11574074074074074},{"x":10,"y":0.125},{"x":11,"y":0.125},{"x":12,"y":0.11574074074074074},{"x":13,"y":0.09722222222222222},{"x":14,"y":0.06944444444444445},{"x":15,"y":0.046296296296296294},{"x":16,"y":0.027777777777777776},{"x":17,"y":0.013888888888888888},{"x":18,"y":0.004629629629629629}]}],"width":400,"height":247.2187957763672,"padding":{"right":10,"top":10,"bottom":20,"left":50}},"value":"#gorilla_repl.vega.VegaView{:content {\"axes\" [{\"scale\" \"x\", \"type\" \"x\"} {\"scale\" \"y\", \"type\" \"y\"}], \"scales\" [{\"name\" \"x\", \"type\" \"linear\", \"range\" \"width\", \"domain\" {\"data\" \"b6b3f5ee-ad23-494e-9cc7-b302c36cba03\", \"field\" \"data.x\"}} {\"name\" \"y\", \"type\" \"linear\", \"range\" \"height\", \"nice\" true, \"domain\" {\"data\" \"b6b3f5ee-ad23-494e-9cc7-b302c36cba03\", \"field\" \"data.y\"}}], \"marks\" [{\"type\" \"symbol\", \"from\" {\"data\" \"b6b3f5ee-ad23-494e-9cc7-b302c36cba03\"}, \"properties\" {\"enter\" {\"x\" {\"scale\" \"x\", \"field\" \"data.x\"}, \"y\" {\"scale\" \"y\", \"field\" \"data.y\"}, \"fill\" {\"value\" \"steelblue\"}, \"fillOpacity\" {\"value\" 1}}, \"update\" {\"shape\" \"circle\", \"size\" {\"value\" 70}, \"stroke\" {\"value\" \"transparent\"}}, \"hover\" {\"size\" {\"value\" 210}, \"stroke\" {\"value\" \"white\"}}}}], \"data\" [{\"name\" \"b6b3f5ee-ad23-494e-9cc7-b302c36cba03\", \"values\" ({\"x\" 3, \"y\" 0.004629629629629629} {\"x\" 4, \"y\" 0.013888888888888888} {\"x\" 5, \"y\" 0.027777777777777776} {\"x\" 6, \"y\" 0.046296296296296294} {\"x\" 7, \"y\" 0.06944444444444445} {\"x\" 8, \"y\" 0.09722222222222222} {\"x\" 9, \"y\" 0.11574074074074074} {\"x\" 10, \"y\" 0.125} {\"x\" 11, \"y\" 0.125} {\"x\" 12, \"y\" 0.11574074074074074} {\"x\" 13, \"y\" 0.09722222222222222} {\"x\" 14, \"y\" 0.06944444444444445} {\"x\" 15, \"y\" 0.046296296296296294} {\"x\" 16, \"y\" 0.027777777777777776} {\"x\" 17, \"y\" 0.013888888888888888} {\"x\" 18, \"y\" 0.004629629629629629})}], \"width\" 400, \"height\" 247.2188, \"padding\" {\"right\" 10, \"top\" 10, \"bottom\" 20, \"left\" 50}}}"}
;; <=

;; @@
(list-plot (dice 5 #(apply * %)))
;; @@
;; =>
;;; {"type":"vega","content":{"axes":[{"scale":"x","type":"x"},{"scale":"y","type":"y"}],"scales":[{"name":"x","type":"linear","range":"width","domain":{"data":"559e32ad-75b5-4a76-a64c-734cf2e80896","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"domain":{"data":"559e32ad-75b5-4a76-a64c-734cf2e80896","field":"data.y"}}],"marks":[{"type":"symbol","from":{"data":"559e32ad-75b5-4a76-a64c-734cf2e80896"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"fill":{"value":"steelblue"},"fillOpacity":{"value":1}},"update":{"shape":"circle","size":{"value":70},"stroke":{"value":"transparent"}},"hover":{"size":{"value":210},"stroke":{"value":"white"}}}}],"data":[{"name":"559e32ad-75b5-4a76-a64c-734cf2e80896","values":[{"x":1,"y":1.286008230452675E-4},{"x":2,"y":6.430041152263374E-4},{"x":3,"y":6.430041152263374E-4},{"x":4,"y":0.0019290123456790122},{"x":5,"y":6.430041152263374E-4},{"x":6,"y":0.0032150205761316874},{"x":8,"y":0.0038580246913580245},{"x":9,"y":0.001286008230452675},{"x":10,"y":0.00257201646090535},{"x":12,"y":0.009002057613168725},{"x":15,"y":0.00257201646090535},{"x":16,"y":0.005787037037037037},{"x":18,"y":0.006430041152263375},{"x":20,"y":0.006430041152263375},{"x":24,"y":0.016718106995884774},{"x":25,"y":0.001286008230452675},{"x":27,"y":0.001286008230452675},{"x":30,"y":0.0102880658436214},{"x":32,"y":0.006558641975308642},{"x":36,"y":0.016718106995884774},{"x":40,"y":0.0102880658436214},{"x":45,"y":0.0038580246913580245},{"x":48,"y":0.022505144032921812},{"x":50,"y":0.0038580246913580245},{"x":54,"y":0.006430041152263375},{"x":60,"y":0.023148148148148147},{"x":64,"y":0.005787037037037037},{"x":72,"y":0.028292181069958847},{"x":75,"y":0.0038580246913580245},{"x":80,"y":0.012217078189300411},{"x":81,"y":6.430041152263374E-4},{"x":90,"y":0.015432098765432098},{"x":96,"y":0.022505144032921812},{"x":100,"y":0.007716049382716049},{"x":108,"y":0.015432098765432098},{"x":120,"y":0.03343621399176955},{"x":125,"y":0.001286008230452675},{"x":128,"y":0.0038580246913580245},{"x":135,"y":0.00257201646090535},{"x":144,"y":0.03343621399176955},{"x":150,"y":0.011574074074074073},{"x":160,"y":0.0102880658436214},{"x":162,"y":0.0032150205761316874},{"x":180,"y":0.030864197530864196},{"x":192,"y":0.016718106995884774},{"x":200,"y":0.009002057613168725},{"x":216,"y":0.023148148148148147},{"x":225,"y":0.0038580246913580245},{"x":240,"y":0.03343621399176955},{"x":243,"y":1.286008230452675E-4},{"x":250,"y":0.00257201646090535},{"x":256,"y":0.0019290123456790122},{"x":270,"y":0.0102880658436214},{"x":288,"y":0.028292181069958847},{"x":300,"y":0.019290123456790122},{"x":320,"y":0.006430041152263375},{"x":324,"y":0.007073045267489712},{"x":360,"y":0.038580246913580245},{"x":375,"y":0.00257201646090535},{"x":384,"y":0.009002057613168725},{"x":400,"y":0.007716049382716049},{"x":405,"y":6.430041152263374E-4},{"x":432,"y":0.023148148148148147},{"x":450,"y":0.011574074074074073},{"x":480,"y":0.023148148148148147},{"x":486,"y":6.430041152263374E-4},{"x":500,"y":0.0038580246913580245},{"x":512,"y":6.430041152263374E-4},{"x":540,"y":0.01800411522633745},{"x":576,"y":0.016718106995884774},{"x":600,"y":0.019290123456790122},{"x":625,"y":6.430041152263374E-4},{"x":640,"y":0.00257201646090535},{"x":648,"y":0.009002057613168725},{"x":675,"y":0.001286008230452675},{"x":720,"y":0.030864197530864196},{"x":750,"y":0.0051440329218107},{"x":768,"y":0.0032150205761316874},{"x":800,"y":0.0038580246913580245},{"x":810,"y":0.00257201646090535},{"x":864,"y":0.015432098765432098},{"x":900,"y":0.015432098765432098},{"x":960,"y":0.0102880658436214},{"x":972,"y":0.001286008230452675},{"x":1000,"y":0.00257201646090535},{"x":1024,"y":1.286008230452675E-4},{"x":1080,"y":0.01800411522633745},{"x":1125,"y":0.001286008230452675},{"x":1152,"y":0.006430041152263375},{"x":1200,"y":0.011574074074074073},{"x":1250,"y":6.430041152263374E-4},{"x":1280,"y":6.430041152263374E-4},{"x":1296,"y":0.007073045267489712},{"x":1350,"y":0.0038580246913580245},{"x":1440,"y":0.015432098765432098},{"x":1500,"y":0.0051440329218107},{"x":1536,"y":6.430041152263374E-4},{"x":1600,"y":0.001286008230452675},{"x":1620,"y":0.0038580246913580245},{"x":1728,"y":0.006430041152263375},{"x":1800,"y":0.011574074074074073},{"x":1875,"y":6.430041152263374E-4},{"x":1920,"y":0.00257201646090535},{"x":1944,"y":0.001286008230452675},{"x":2000,"y":0.001286008230452675},{"x":2160,"y":0.0102880658436214},{"x":2250,"y":0.00257201646090535},{"x":2304,"y":0.001286008230452675},{"x":2400,"y":0.0038580246913580245},{"x":2500,"y":6.430041152263374E-4},{"x":2592,"y":0.0032150205761316874},{"x":2700,"y":0.0038580246913580245},{"x":2880,"y":0.0038580246913580245},{"x":3000,"y":0.00257201646090535},{"x":3125,"y":1.286008230452675E-4},{"x":3240,"y":0.00257201646090535},{"x":3456,"y":0.001286008230452675},{"x":3600,"y":0.0038580246913580245},{"x":3750,"y":6.430041152263374E-4},{"x":3888,"y":6.430041152263374E-4},{"x":4320,"y":0.00257201646090535},{"x":4500,"y":0.001286008230452675},{"x":5184,"y":6.430041152263374E-4},{"x":5400,"y":0.001286008230452675},{"x":6480,"y":6.430041152263374E-4},{"x":7776,"y":1.286008230452675E-4}]}],"width":400,"height":247.2187957763672,"padding":{"right":10,"top":10,"bottom":20,"left":50}},"value":"#gorilla_repl.vega.VegaView{:content {\"axes\" [{\"scale\" \"x\", \"type\" \"x\"} {\"scale\" \"y\", \"type\" \"y\"}], \"scales\" [{\"name\" \"x\", \"type\" \"linear\", \"range\" \"width\", \"domain\" {\"data\" \"559e32ad-75b5-4a76-a64c-734cf2e80896\", \"field\" \"data.x\"}} {\"name\" \"y\", \"type\" \"linear\", \"range\" \"height\", \"nice\" true, \"domain\" {\"data\" \"559e32ad-75b5-4a76-a64c-734cf2e80896\", \"field\" \"data.y\"}}], \"marks\" [{\"type\" \"symbol\", \"from\" {\"data\" \"559e32ad-75b5-4a76-a64c-734cf2e80896\"}, \"properties\" {\"enter\" {\"x\" {\"scale\" \"x\", \"field\" \"data.x\"}, \"y\" {\"scale\" \"y\", \"field\" \"data.y\"}, \"fill\" {\"value\" \"steelblue\"}, \"fillOpacity\" {\"value\" 1}}, \"update\" {\"shape\" \"circle\", \"size\" {\"value\" 70}, \"stroke\" {\"value\" \"transparent\"}}, \"hover\" {\"size\" {\"value\" 210}, \"stroke\" {\"value\" \"white\"}}}}], \"data\" [{\"name\" \"559e32ad-75b5-4a76-a64c-734cf2e80896\", \"values\" ({\"x\" 1, \"y\" 1.286008230452675E-4} {\"x\" 2, \"y\" 6.430041152263374E-4} {\"x\" 3, \"y\" 6.430041152263374E-4} {\"x\" 4, \"y\" 0.0019290123456790122} {\"x\" 5, \"y\" 6.430041152263374E-4} {\"x\" 6, \"y\" 0.0032150205761316874} {\"x\" 8, \"y\" 0.0038580246913580245} {\"x\" 9, \"y\" 0.001286008230452675} {\"x\" 10, \"y\" 0.00257201646090535} {\"x\" 12, \"y\" 0.009002057613168725} {\"x\" 15, \"y\" 0.00257201646090535} {\"x\" 16, \"y\" 0.005787037037037037} {\"x\" 18, \"y\" 0.006430041152263375} {\"x\" 20, \"y\" 0.006430041152263375} {\"x\" 24, \"y\" 0.016718106995884774} {\"x\" 25, \"y\" 0.001286008230452675} {\"x\" 27, \"y\" 0.001286008230452675} {\"x\" 30, \"y\" 0.0102880658436214} {\"x\" 32, \"y\" 0.006558641975308642} {\"x\" 36, \"y\" 0.016718106995884774} {\"x\" 40, \"y\" 0.0102880658436214} {\"x\" 45, \"y\" 0.0038580246913580245} {\"x\" 48, \"y\" 0.022505144032921812} {\"x\" 50, \"y\" 0.0038580246913580245} {\"x\" 54, \"y\" 0.006430041152263375} {\"x\" 60, \"y\" 0.023148148148148147} {\"x\" 64, \"y\" 0.005787037037037037} {\"x\" 72, \"y\" 0.028292181069958847} {\"x\" 75, \"y\" 0.0038580246913580245} {\"x\" 80, \"y\" 0.012217078189300411} {\"x\" 81, \"y\" 6.430041152263374E-4} {\"x\" 90, \"y\" 0.015432098765432098} {\"x\" 96, \"y\" 0.022505144032921812} {\"x\" 100, \"y\" 0.007716049382716049} {\"x\" 108, \"y\" 0.015432098765432098} {\"x\" 120, \"y\" 0.03343621399176955} {\"x\" 125, \"y\" 0.001286008230452675} {\"x\" 128, \"y\" 0.0038580246913580245} {\"x\" 135, \"y\" 0.00257201646090535} {\"x\" 144, \"y\" 0.03343621399176955} {\"x\" 150, \"y\" 0.011574074074074073} {\"x\" 160, \"y\" 0.0102880658436214} {\"x\" 162, \"y\" 0.0032150205761316874} {\"x\" 180, \"y\" 0.030864197530864196} {\"x\" 192, \"y\" 0.016718106995884774} {\"x\" 200, \"y\" 0.009002057613168725} {\"x\" 216, \"y\" 0.023148148148148147} {\"x\" 225, \"y\" 0.0038580246913580245} {\"x\" 240, \"y\" 0.03343621399176955} {\"x\" 243, \"y\" 1.286008230452675E-4} {\"x\" 250, \"y\" 0.00257201646090535} {\"x\" 256, \"y\" 0.0019290123456790122} {\"x\" 270, \"y\" 0.0102880658436214} {\"x\" 288, \"y\" 0.028292181069958847} {\"x\" 300, \"y\" 0.019290123456790122} {\"x\" 320, \"y\" 0.006430041152263375} {\"x\" 324, \"y\" 0.007073045267489712} {\"x\" 360, \"y\" 0.038580246913580245} {\"x\" 375, \"y\" 0.00257201646090535} {\"x\" 384, \"y\" 0.009002057613168725} {\"x\" 400, \"y\" 0.007716049382716049} {\"x\" 405, \"y\" 6.430041152263374E-4} {\"x\" 432, \"y\" 0.023148148148148147} {\"x\" 450, \"y\" 0.011574074074074073} {\"x\" 480, \"y\" 0.023148148148148147} {\"x\" 486, \"y\" 6.430041152263374E-4} {\"x\" 500, \"y\" 0.0038580246913580245} {\"x\" 512, \"y\" 6.430041152263374E-4} {\"x\" 540, \"y\" 0.01800411522633745} {\"x\" 576, \"y\" 0.016718106995884774} {\"x\" 600, \"y\" 0.019290123456790122} {\"x\" 625, \"y\" 6.430041152263374E-4} {\"x\" 640, \"y\" 0.00257201646090535} {\"x\" 648, \"y\" 0.009002057613168725} {\"x\" 675, \"y\" 0.001286008230452675} {\"x\" 720, \"y\" 0.030864197530864196} {\"x\" 750, \"y\" 0.0051440329218107} {\"x\" 768, \"y\" 0.0032150205761316874} {\"x\" 800, \"y\" 0.0038580246913580245} {\"x\" 810, \"y\" 0.00257201646090535} {\"x\" 864, \"y\" 0.015432098765432098} {\"x\" 900, \"y\" 0.015432098765432098} {\"x\" 960, \"y\" 0.0102880658436214} {\"x\" 972, \"y\" 0.001286008230452675} {\"x\" 1000, \"y\" 0.00257201646090535} {\"x\" 1024, \"y\" 1.286008230452675E-4} {\"x\" 1080, \"y\" 0.01800411522633745} {\"x\" 1125, \"y\" 0.001286008230452675} {\"x\" 1152, \"y\" 0.006430041152263375} {\"x\" 1200, \"y\" 0.011574074074074073} {\"x\" 1250, \"y\" 6.430041152263374E-4} {\"x\" 1280, \"y\" 6.430041152263374E-4} {\"x\" 1296, \"y\" 0.007073045267489712} {\"x\" 1350, \"y\" 0.0038580246913580245} {\"x\" 1440, \"y\" 0.015432098765432098} {\"x\" 1500, \"y\" 0.0051440329218107} {\"x\" 1536, \"y\" 6.430041152263374E-4} {\"x\" 1600, \"y\" 0.001286008230452675} {\"x\" 1620, \"y\" 0.0038580246913580245} {\"x\" 1728, \"y\" 0.006430041152263375} {\"x\" 1800, \"y\" 0.011574074074074073} {\"x\" 1875, \"y\" 6.430041152263374E-4} {\"x\" 1920, \"y\" 0.00257201646090535} {\"x\" 1944, \"y\" 0.001286008230452675} {\"x\" 2000, \"y\" 0.001286008230452675} {\"x\" 2160, \"y\" 0.0102880658436214} {\"x\" 2250, \"y\" 0.00257201646090535} {\"x\" 2304, \"y\" 0.001286008230452675} {\"x\" 2400, \"y\" 0.0038580246913580245} {\"x\" 2500, \"y\" 6.430041152263374E-4} {\"x\" 2592, \"y\" 0.0032150205761316874} {\"x\" 2700, \"y\" 0.0038580246913580245} {\"x\" 2880, \"y\" 0.0038580246913580245} {\"x\" 3000, \"y\" 0.00257201646090535} {\"x\" 3125, \"y\" 1.286008230452675E-4} {\"x\" 3240, \"y\" 0.00257201646090535} {\"x\" 3456, \"y\" 0.001286008230452675} {\"x\" 3600, \"y\" 0.0038580246913580245} {\"x\" 3750, \"y\" 6.430041152263374E-4} {\"x\" 3888, \"y\" 6.430041152263374E-4} {\"x\" 4320, \"y\" 0.00257201646090535} {\"x\" 4500, \"y\" 0.001286008230452675} {\"x\" 5184, \"y\" 6.430041152263374E-4} {\"x\" 5400, \"y\" 0.001286008230452675} {\"x\" 6480, \"y\" 6.430041152263374E-4} {\"x\" 7776, \"y\" 1.286008230452675E-4})}], \"width\" 400, \"height\" 247.2188, \"padding\" {\"right\" 10, \"top\" 10, \"bottom\" 20, \"left\" 50}}}"}
;; <=

;; @@
(list-plot (dice 5 #(apply + (filter odd? %))))
;; @@
;; =>
;;; {"type":"vega","content":{"axes":[{"scale":"x","type":"x"},{"scale":"y","type":"y"}],"scales":[{"name":"x","type":"linear","range":"width","domain":{"data":"88870aba-c115-4836-9d9d-c193711704f5","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"domain":{"data":"88870aba-c115-4836-9d9d-c193711704f5","field":"data.y"}}],"marks":[{"type":"symbol","from":{"data":"88870aba-c115-4836-9d9d-c193711704f5"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"fill":{"value":"steelblue"},"fillOpacity":{"value":1}},"update":{"shape":"circle","size":{"value":70},"stroke":{"value":"transparent"}},"hover":{"size":{"value":210},"stroke":{"value":"white"}}}}],"data":[{"name":"88870aba-c115-4836-9d9d-c193711704f5","values":[{"x":0,"y":0.03125},{"x":1,"y":0.052083333333333336},{"x":2,"y":0.034722222222222224},{"x":3,"y":0.06365740740740741},{"x":4,"y":0.07137345679012345},{"x":5,"y":0.08693415637860083},{"x":6,"y":0.11188271604938271},{"x":7,"y":0.07008744855967078},{"x":8,"y":0.08873456790123457},{"x":9,"y":0.08294753086419752},{"x":10,"y":0.06558641975308642},{"x":11,"y":0.07330246913580248},{"x":12,"y":0.03665123456790124},{"x":13,"y":0.04050925925925926},{"x":14,"y":0.030864197530864196},{"x":15,"y":0.018132716049382717},{"x":16,"y":0.019290123456790122},{"x":17,"y":0.005787037037037037},{"x":18,"y":0.007716049382716049},{"x":19,"y":0.0038580246913580245},{"x":20,"y":0.0019290123456790122},{"x":21,"y":0.0019290123456790122},{"x":23,"y":6.430041152263374E-4},{"x":25,"y":1.286008230452675E-4}]}],"width":400,"height":247.2187957763672,"padding":{"right":10,"top":10,"bottom":20,"left":50}},"value":"#gorilla_repl.vega.VegaView{:content {\"axes\" [{\"scale\" \"x\", \"type\" \"x\"} {\"scale\" \"y\", \"type\" \"y\"}], \"scales\" [{\"name\" \"x\", \"type\" \"linear\", \"range\" \"width\", \"domain\" {\"data\" \"88870aba-c115-4836-9d9d-c193711704f5\", \"field\" \"data.x\"}} {\"name\" \"y\", \"type\" \"linear\", \"range\" \"height\", \"nice\" true, \"domain\" {\"data\" \"88870aba-c115-4836-9d9d-c193711704f5\", \"field\" \"data.y\"}}], \"marks\" [{\"type\" \"symbol\", \"from\" {\"data\" \"88870aba-c115-4836-9d9d-c193711704f5\"}, \"properties\" {\"enter\" {\"x\" {\"scale\" \"x\", \"field\" \"data.x\"}, \"y\" {\"scale\" \"y\", \"field\" \"data.y\"}, \"fill\" {\"value\" \"steelblue\"}, \"fillOpacity\" {\"value\" 1}}, \"update\" {\"shape\" \"circle\", \"size\" {\"value\" 70}, \"stroke\" {\"value\" \"transparent\"}}, \"hover\" {\"size\" {\"value\" 210}, \"stroke\" {\"value\" \"white\"}}}}], \"data\" [{\"name\" \"88870aba-c115-4836-9d9d-c193711704f5\", \"values\" ({\"x\" 0, \"y\" 0.03125} {\"x\" 1, \"y\" 0.052083333333333336} {\"x\" 2, \"y\" 0.034722222222222224} {\"x\" 3, \"y\" 0.06365740740740741} {\"x\" 4, \"y\" 0.07137345679012345} {\"x\" 5, \"y\" 0.08693415637860083} {\"x\" 6, \"y\" 0.11188271604938271} {\"x\" 7, \"y\" 0.07008744855967078} {\"x\" 8, \"y\" 0.08873456790123457} {\"x\" 9, \"y\" 0.08294753086419752} {\"x\" 10, \"y\" 0.06558641975308642} {\"x\" 11, \"y\" 0.07330246913580248} {\"x\" 12, \"y\" 0.03665123456790124} {\"x\" 13, \"y\" 0.04050925925925926} {\"x\" 14, \"y\" 0.030864197530864196} {\"x\" 15, \"y\" 0.018132716049382717} {\"x\" 16, \"y\" 0.019290123456790122} {\"x\" 17, \"y\" 0.005787037037037037} {\"x\" 18, \"y\" 0.007716049382716049} {\"x\" 19, \"y\" 0.0038580246913580245} {\"x\" 20, \"y\" 0.0019290123456790122} {\"x\" 21, \"y\" 0.0019290123456790122} {\"x\" 23, \"y\" 6.430041152263374E-4} {\"x\" 25, \"y\" 1.286008230452675E-4})}], \"width\" 400, \"height\" 247.2188, \"padding\" {\"right\" 10, \"top\" 10, \"bottom\" 20, \"left\" 50}}}"}
;; <=

;; @@

;; @@
;; Finding the probability that some number appears twice in k rolls.

;; Roll a fair die until some number appears for
;; the second time. Let X = the number of rolls
;; required to accomplish this. Find the probability mass
;; function and expected value of X

(def die (map inc (range 6)))

(defn roll [n] (selections die n))

(roll 3)

(def a-roll (rand-nth (roll 3)))

;; Bad
(defn contains-two-same [roll]
  (->> roll
       frequencies
       vals
       (map #(= 2 %))
       (some #{true})))

(defn true-false-prob [c] (/ (get c true) (apply + (vals c))))

(defn p-some-num-shows-twice [n]
  {:pre [(< 1 n)]}
  (->> (roll n)
       (map contains-two-same)
       frequencies
       (fn [roll-freqs])))


;;;;;
(defn contains-two-same [roll]
  (let [start (drop-last roll)]
    (and (apply distinct? start)
         (some #{true} (map #(= (last roll) %)
                            start)))))
;;;;;

(defn binomial-dist [n p]
  {:pre [(<= 0 p 1)]}
  (fn [k]
    (* (choose n k)
       (Math/pow p k)
       (Math/pow (- 1 p) (- n k)))))

(defn X (binomial-dist 7 1/6))

(X 7) ;; 1

(def p-X (map X (range 8)))

(apply + p-X) ;; 1

(defn expectation [rng rv]
  (->> rng
       (map rv)
       (map #(* %1 %2) rng)
       (apply +)))

(expectation (range 8) X)
;; 1.1666666667

(* 6 (expectation (range 8) X))
;; 7 - the number of dice rolls expected to see some number twice

(def X (binomial-distribution))
(map #(pdf X %) (range 8))


;; @@

;; Toss a coin (pr(heads) = 2/3) 900 times. Find the (approximate) probability
;; that the number of heads is greater than or equal to 625.

(cdf (binomial-distribution ))
{(3 6 3) false, (2 4 4) false, (2 3 1) true, (2 4 1) true,(6 1 5) true, (2 5 4) true, (2 1 5) true, (3 2 4) true,
 (1 6 2) true, (5 3 1) true, (4 4 2) false, (6 5 5) false,(3 1 3) false, (3 4 1) true, (1 4 3) true, (1 3 1) false,
 (5 6 5) false, (6 4 4) false, (2 4 2) false, (2 1 6) true,(2 2 4) false, (3 2 6) true, (5 2 3) true, (1 5 5) false,
 (5 5 3) false, (5 4 2) true, (3 1 6) true, (3 1 1) false,(4 1 5) true, (5 1 5) false, (2 4 6) true, (5 6 6) false,
 (2 5 3) true, (6 4 2) true, (1 3 2) true, (5 4 3) true,(4 3 2) true, (5 2 5) false, (2 4 5) true, (6 5 4) true,
 (5 4 1) true, (4 5 2) true, (1 5 4) true, (3 4 3) false,(4 5 3) true, (5 3 2) true, (4 1 4) false, (4 4 3) false,
 (4 2 4) false, (2 3 5) true, (3 4 2) true, (1 1 3) false,(6 2 4) true, (3 5 3) false, (2 2 6) false, (1 6 4) true,
 (1 3 4) true, (6 2 5) true, (1 4 4) false, (4 5 1) true,(1 4 5) true, (1 6 5) true, (2 2 5) false, (2 6 3) true,
 (4 5 6) true, (2 5 6) true, (2 3 2) false, (1 2 6) true,(6 3 3) false, (2 5 5) false, (4 4 1) false, (1 1 1) false,
 (6 6 2) false, (3 5 4) true, (1 2 1) false, (1 6 6) false,(6 2 6) false, (6 3 4) true, (1 1 6) false, (2 2 2) false,
 (3 2 2) false, (3 6 1) true, (1 4 1) false, (3 3 3) false,(5 3 6) true, (5 6 1) true, (1 5 2) true, (2 6 6) false,
 (1 3 6) true, (2 1 3) true, (5 1 1) false, (3 1 2) true,(5 1 2) true, (4 6 6) false, (1 3 3) false, (3 2 3) false,
 (1 6 1) false, (5 4 6) true, (3 1 5) true, (4 2 1) true,(5 5 4) false, (4 4 6) false, (2 6 1) true, (3 6 2) true,
 (3 6 6) false, (2 2 1) false, (4 6 2) true, (6 1 3) true,(6 1 2) true, (6 5 3) true, (6 4 5) true, (4 1 2) true,
 (6 1 1) false, (4 3 1) true, (3 6 5) true, (2 6 4) true,(3 4 5) true, (2 6 5) true, (2 3 4) true, (1 5 6) true,
 (6 2 2) false, (6 2 3) true, (4 2 6) true, (6 1 4) true,(3 2 5) true, (5 6 4) true, (1 5 3) true, (4 2 5) true,
 (4 1 3) true, (5 1 3) true, (6 6 1) false, (2 3 6) true,(2 6 2) false, (3 5 5) false, (5 3 5) false, (4 3 4) false,
 (2 2 3) false, (5 4 4) false, (4 6 5) true, (3 3 1) false,(4 1 6) true, (5 1 6) true, (1 2 5) true, (6 6 6) false,
 (3 5 2) true, (5 2 1) true, (6 6 5) false, (5 2 4) true,(4 3 3) false, (1 5 1) false, (4 4 4) false, (1 1 5) false,
 (5 5 1) false, (6 1 6) false, (1 2 3) true, (2 1 1) false,(1 1 4) false, (5 4 5) false, (4 1 1) false, (2 3 3) false,
 (4 3 6) true, (6 5 6) false, (3 4 4) false, (5 3 4) true,(6 3 2) true, (5 6 3) true, (3 5 1) true, (3 2 1) true,
 (1 1 2) false, (5 5 5) false, (6 3 5) true, (6 3 6) false,(6 6 3) false, (2 4 3) true, (1 6 3) true, (4 5 4) false,
 (5 2 6) true, (3 3 6) false, (3 5 6) true, (5 6 2) true,(3 6 4) true, (2 5 1) true, (2 1 2) false, (6 3 1) true,
 (6 5 2) true, (4 3 5) true, (4 5 5) false, (6 4 1) true,(3 3 4) false, (6 5 1) true, (1 2 2) false, (3 4 6) true,
 (6 4 6) false, (1 4 6) true, (4 4 5) false, (4 6 1) true,(5 3 3) false, (6 6 4) false, (6 4 3) true, (2 5 2) false,
 (5 5 2) false, (1 3 5) true, (5 5 6) false, (5 1 4) true,(1 2 4) true, (3 3 5) false, (3 1 4) true, (4 2 2) false,
 (4 2 3) true, (1 4 2) true, (4 6 4) false, (3 3 2) false,(4 6 3) true, (6 2 1) true, (5 2 2) false, (2 1 4) true}
((1 1 1) (1 1 2) (1 1 3) (1 1 4) (1 1 5) (1 1 6) ;; false
 (1 2 1) (1 2 2) (1 2 3) (1 2 4) (1 2 5) (1 2 6) ;; 1/6
 (1 3 1) (1 3 2) (1 3 3) (1 3 4) (1 3 5) (1 3 6) ;; 1/6
 (1 4 1) (1 4 2) (1 4 3) (1 4 4) (1 4 5) (1 4 6) ;; 1/6
 (1 5 1) (1 5 2) (1 5 3) (1 5 4) (1 5 5) (1 5 6) ;; 1/6
 (1 6 1) (1 6 2) (1 6 3) (1 6 4) (1 6 5) (1 6 6) ;; 1/6
 (2 1 1) (2 1 2) (2 1 3) (2 1 4) (2 1 5) (2 1 6) ;; 1/6
 (2 2 1) (2 2 2) (2 2 3) (2 2 4) (2 2 5) (2 2 6) ;; false
 (2 3 1) (2 3 2) (2 3 3) (2 3 4) (2 3 5) (2 3 6) ;; 1/6
 (2 4 1) (2 4 2) (2 4 3) (2 4 4) (2 4 5) (2 4 6) ;; 1/6
 (2 5 1) (2 5 2) (2 5 3) (2 5 4) (2 5 5) (2 5 6) ;; 1/6
 (2 6 1) (2 6 2) (2 6 3) (2 6 4) (2 6 5) (2 6 6) ;; 1/6
 (3 1 1) (3 1 2) (3 1 3) (3 1 4) (3 1 5) (3 1 6) ;; 1/6
 (3 2 1) (3 2 2) (3 2 3) (3 2 4) (3 2 5) (3 2 6) ;; 1/6
 (3 3 1) (3 3 2) (3 3 3) (3 3 4) (3 3 5) (3 3 6) ;; false
 (3 4 1) (3 4 2) (3 4 3) (3 4 4) (3 4 5) (3 4 6) ;; 1/6
 (3 5 1) (3 5 2) (3 5 3) (3 5 4) (3 5 5) (3 5 6) ;; 1/6
 (3 6 1) (3 6 2) (3 6 3) (3 6 4) (3 6 5) (3 6 6) ;; 1/6
 (4 1 1) (4 1 2) (4 1 3) (4 1 4) (4 1 5) (4 1 6) ;; 1/6
 (4 2 1) (4 2 2) (4 2 3) (4 2 4) (4 2 5) (4 2 6) ;; 1/6
 (4 3 1) (4 3 2) (4 3 3) (4 3 4) (4 3 5) (4 3 6) ;; 1/6
 (4 4 1) (4 4 2) (4 4 3) (4 4 4) (4 4 5) (4 4 6) ;; false
 (4 5 1) (4 5 2) (4 5 3) (4 5 4) (4 5 5) (4 5 6) ;; 1/6
 (4 6 1) (4 6 2) (4 6 3) (4 6 4) (4 6 5) (4 6 6) ;; 1/6
 (5 1 1) (5 1 2) (5 1 3) (5 1 4) (5 1 5) (5 1 6) ;; 1/6
 (5 2 1) (5 2 2) (5 2 3) (5 2 4) (5 2 5) (5 2 6) ;; 1/6
 (5 3 1) (5 3 2) (5 3 3) (5 3 4) (5 3 5) (5 3 6) ;; 1/6
 (5 4 1) (5 4 2) (5 4 3) (5 4 4) (5 4 5) (5 4 6) ;; 1/6
 (5 5 1) (5 5 2) (5 5 3) (5 5 4) (5 5 5) (5 5 6) ;; false
 (5 6 1) (5 6 2) (5 6 3) (5 6 4) (5 6 5) (5 6 6) ;; 1/6
 (6 1 1) (6 1 2) (6 1 3) (6 1 4) (6 1 5) (6 1 6) ;; 1/6
 (6 2 1) (6 2 2) (6 2 3) (6 2 4) (6 2 5) (6 2 6) ;; 1/6
 (6 3 1) (6 3 2) (6 3 3) (6 3 4) (6 3 5) (6 3 6) ;; 1/6
 (6 4 1) (6 4 2) (6 4 3) (6 4 4) (6 4 5) (6 4 6) ;; 1/6
 (6 5 1) (6 5 2) (6 5 3) (6 5 4) (6 5 5) (6 5 6) ;; 1/6
 (6 6 1) (6 6 2) (6 6 3) (6 6 4) (6 6 5) (6 6 6)) ;; false
